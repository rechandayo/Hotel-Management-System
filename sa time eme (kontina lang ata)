using System;
using System.Net;
using System.Net.Http.Headers;
using System.Reflection;

namespace HotelBookingProgram
{
    class Program
    {
        static Dictionary<string, string> accounts = new Dictionary<string, string>();

        static int currentpage = 0;
        static string? address, contactNumber, emailAddress, realRoom;
        static string roomchoice;
        public static int age;
        public static int SS = 500, MS = 800, BS = 1000, HS = 1500, PS = 2000;
        public static int costperday;
        public static int index = 0;

        static string?[] name = new string[25];
        public static string[] finalrooms = new string[25];
        static bool[] rooms = new bool[20];
        static string[] finalroom = new string[25];
        public static int[] total = new int[25];
        static int[] finaltotal = new int[25];
        public static string[] paymentmeth = new string[25];
        public static DateTime[] startDate = new DateTime[25];
        public static DateTime[] endDate = new DateTime[25];
        static DateTime[] roomEntryTimes = new DateTime[20]; // Array to store entry times for rooms
        static DateTime[] roomExitTimes = new DateTime[20]; // Array to store exit times for rooms

        public static int[] adultno = new int[25];
        public static int[] daysDifference = new int[25];
        static string[] occupants = new string[25];
        static string[] finalname = new string[25];
        static string[] finalpaymentmeth = new string[25];
        static int[] finaladultno = new int[25];
        public static DateTime[] finalstartDate = new DateTime[25];
        public static DateTime[] finalendDate = new DateTime[25];
        static int[] finaldaysDifference = new int[25];
        public static void Main(string[] args)
        {
            char retry;
            do
            {

                index++;

                Welcome();

                homepage();

                Welcome();

                Basicinfo();

                RoomType();

                DateAndCost();

                Incompletebookingdetails();

                confirmation();


                Console.Write("Do you want to book another room? (y/n): ");
                retry = char.Parse(Console.ReadLine());

            } while (retry == 'y' || retry == 'Y');

            if (retry != 'n')
            {
                showguidelines();
            }

        }

        static void Welcome()
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Yellow;

            Console.WriteLine("*************************************************");
            Console.WriteLine("*                                               *");
            Console.WriteLine("*     Welcome to Morada Grand Royal Hotel!      *");
            Console.WriteLine("*                                               *");
            Console.WriteLine("*************************************************");
            Console.ResetColor();
            Console.ReadKey();
        }

        static void homepage()
        {

            Console.Clear();

            Console.WriteLine("How can we help you?");

            bool validChoice = false;
            Console.WriteLine("\n\n***********************");
            Console.WriteLine("Navigation Options:");
            Console.WriteLine("1. Login (Create your account first)");
            Console.WriteLine("2. Sign Up");
            Console.WriteLine("***********************");
            Console.Write("What do you want to do: ");

            while (!validChoice)
            {

                if (int.TryParse(Console.ReadLine(), out int homeChoice))
                {
                    switch (homeChoice)
                    {
                        case 1:
                            LoginProcess();
                            validChoice = true;
                            break;
                        case 2:
                            SignUp();
                            validChoice = true;
                            break;
                        default:
                            Console.WriteLine("Invalid choice. Please enter 1 or 2.");
                            break;
                    }
                }
                else
                {
                    Console.Write("Invalid input. Please enter a number: ");
                }
            }

            Console.ReadKey();
        }

       

        static void SignUp()
        {
            Console.Clear();
            Console.WriteLine("Welcome! Let's create an account.");

            while (true)
            {
                Console.Write("Please enter your age: ");
                if (int.TryParse(Console.ReadLine(), out int age))
                {
                    if (age >= 18)
                    {
                        Console.WriteLine("You are eligible to create an account.");
                        break; // Exit the loop when the input is valid
                    }
                    else
                    {
                        Console.WriteLine("You must be 18 years or older to create an account.");
                        Console.ReadKey();
                        homepage();
                        break; // Exit the loop after displaying the message
                    }
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter a valid age.");
                }
            }

            Console.Write("Please enter a new username: ");
            string newUsername = Console.ReadLine();

            while (string.IsNullOrEmpty(newUsername)) // Ensures the username is not empty
            {
                Console.WriteLine("Username cannot be empty. Please enter a valid username: ");
                newUsername = Console.ReadLine();
            }

            Console.Write("Please enter a password: ");
            string newPassword = Console.ReadLine();

            while (string.IsNullOrEmpty(newPassword)) // Ensures the password is not empty
            {
                Console.WriteLine("Password cannot be empty. Please enter a valid password:");
                newPassword = Console.ReadLine();
            }

            AddAccount(newUsername, newPassword);

            Console.WriteLine("Account created successfully!");
            Console.WriteLine("Enter to go back to the Home Page and Login to your account to book a hotel");

            Console.ReadKey();

            homepage();


        }

        static void AddAccount(string username, string password)
        {
            if (!accounts.ContainsKey(username))
            {
                accounts.Add(username, password);
            }
            else
            {
                Console.WriteLine("Account already exists. Please choose a different username.");
                SignUp();
            }
        }

        static void LoginProcess()
        {
            Console.Clear();
            Console.WriteLine("\nPlease login to your account.");

            Console.Write("Enter your username: ");
            string enteredUsername = Console.ReadLine();

            Console.Write("Enter your password: ");
            string enteredPassword = Console.ReadLine();


            if (Login(enteredUsername, enteredPassword))
            {
                Console.WriteLine("Login successful!");
                Console.WriteLine("Enter to book a hotel now");
            }
            else
            {
                Console.WriteLine("Invalid username or password. We will now redirect you to the Home page.");
                Console.ReadKey();
                homepage();
            }

        }

        static bool Login(string username, string password)
        {
            return accounts.ContainsKey(username) && accounts[username] == password;
        }

        static void Basicinfo()
        {
            Console.Clear();
            bool validInput1 = false;
            bool validInput2 = false;
            bool validInput3 = false;

            do
            {
                try
                {
                    Console.Write("Please enter your name: ");
                    name[index - 1] = Console.ReadLine();

                    if (name[index - 1].Any(Char.IsDigit))
                    {
                        throw new ArgumentException("Name should not contain numbers.");
                    }

                    else if (string.IsNullOrWhiteSpace(name[index - 1]))
                    {
                        throw new ArgumentException("Name should not be empty or whitespace.");
                    }

                    else
                    {
                        validInput1 = true;
                    }
                }

                catch (ArgumentException ex)
                {
                    Console.WriteLine("Invalid input: " + ex.Message);
                }
            } while (!validInput1);

            do
            {
                try
                {
                    Console.Write("Please enter your contact number: ");
                    contactNumber = Console.ReadLine();

                    if (contactNumber.Any(char.IsLetter))
                    {
                        throw new ArgumentException("Contack Number should not contain letters.");
                    }

                    else if (string.IsNullOrWhiteSpace(contactNumber))
                    {
                        throw new ArgumentException("contact number should not be empty or whitespace.");
                    }

                    else
                    {
                        validInput2 = true;
                    }
                }

                catch (ArgumentException ex)
                {
                    Console.WriteLine("Invalid input: " + ex.Message);
                }
            } while (!validInput2);

            do
            {
                try
                {
                    Console.Write("Please enter your email address: ");
                    emailAddress = Console.ReadLine();

                    if (string.IsNullOrWhiteSpace(emailAddress))
                    {
                        throw new ArgumentException("Email address should not be empty or whitespace.");
                    }

                    else
                    {
                        validInput3 = true;
                    }
                }

                catch (ArgumentException ex)
                {
                    Console.WriteLine("Invalid input: " + ex.Message);
                }
            } while (!validInput3);

        }

        static void RoomType()
        {
            Console.Clear();
            Console.WriteLine();
            Console.WriteLine("******************************************");
            Console.WriteLine("*          Guest and Room                *");
            Console.WriteLine("******************************************");

            Console.WriteLine();


            bool validroom = false;
            bool validinput = false;

            do
            {
                try
                {
                    Console.WriteLine("Our hotel have a min/max occupants of 1 to 5");
                    Console.Write("Enter the number of occupants: ");
                    occupants[index - 1] = Console.ReadLine();

                    if (string.IsNullOrWhiteSpace(occupants[index - 1]))
                    {
                        throw new ArgumentException("Input cannot be blank.");
                    }

                    adultno[index - 1] = int.Parse(occupants[index - 1]);

                    if (adultno[index - 1] < 1 || adultno[index - 1] > 5)
                    {
                        throw new ArgumentOutOfRangeException();
                    }

                    validinput = true;

                }
                catch (ArgumentException ex)
                {
                    Console.WriteLine("Invalid input: " + ex.Message);
                }
                catch (FormatException)
                {
                    Console.WriteLine("Invalid input. Please enter a valid number.");
                }

            } while (!validinput);



            while (true)
            {
                Console.WriteLine("You entered: " + adultno[index - 1] + " occupants");
                Console.ReadLine();
                Console.Clear();


                if (adultno[index - 1] == 1)
                {
                    Console.WriteLine();
                    Console.WriteLine("Here are our offers : \nSS1, SS2, SS3, SS4, SS5 \n Standard Suites (500 php per head for 24hrs)");
                    Console.WriteLine("It includes : \n A living area \n A bedroom with queen-sized bed \n A bathroom with a shower");
                    Console.WriteLine();
                    Console.WriteLine("MS1, MS2, MS3, MS4, MS5 \n Mini Suite (800 php per head for 24hrs)");
                    Console.WriteLine("Separate living area \n A bedroom with king-sized bed \n A spacious bathroom with a bathtub and shower \n Work desk \n High-speed internet \n Flat screen TV \n");
                    Console.WriteLine();
                    Console.WriteLine("BS1, BS2, BS3, BS4, BS5 \n Bridal Suites (1000 php per head for 24hrs)");
                    Console.WriteLine("Romantic ambiance with a king-sized bed \n A spacious bathroom with a Jacuzzi tub \n A separate living area \n Champagne \n Chocolates \n Other romantic touches");
                    Console.WriteLine();
                    Console.WriteLine("HS1, HS2, HS3, HS4, HS5 \n Honeymoon Suite (1500 php per head for 24hrs)");
                    Console.WriteLine("Four-poster bed \n A private balcony with a view \n A spacious bathroom with a Jacuzzi tub \n Bottle of champagne \n Rose petals \n Other romantic amenities \n ");
                    Console.WriteLine();
                    Console.WriteLine(" SS1 to SS5 = Standard Suites \n MS1 to MS5 = Mini Suite \n BS1 to BS5 = Bridal Suites \n HS1 to HS5 = Honeymoon Suite");

                }
                else if (adultno[index - 1] <= 3)
                {
                    Console.WriteLine();
                    Console.WriteLine("Here are our available rooms:");
                    Console.WriteLine();
                    Console.WriteLine("MS1, MS2, MS3, MS4, MS5 \n Mini Suite (800 php per head for 24hrs)");
                    Console.WriteLine("Separate living area \n A bedroom with king-sized bed \n A spacious bathroom with a bathtub and shower \n Work desk \n High-speed internet \n Flat screen TV \n");
                    Console.WriteLine();
                    Console.WriteLine("BS1, BS2, BS3, BS4, BS5 \n Bridal Suites (1000 php per head for 24hrs)");
                    Console.WriteLine("Romantic ambiance with a king-sized bed \n A spacious bathroom with a Jacuzzi tub \n A separate living area \n Champagne \n Chocolates \n Other romantic touches");
                    Console.WriteLine();
                    Console.WriteLine("HS1, HS2, HS3, HS4, HS5 \n Honeymoon Suite (1500 php per head for 24hrs)");
                    Console.WriteLine("Four-poster bed \n A private balcony with a view \n A spacious bathroom with a Jacuzzi tub \n Bottle of champagne \n Rose petals \n Other romantic amenities \n ");
                    Console.WriteLine();
                    Console.WriteLine(" MS1 to MS5 = Mini Suite \n BS1 to BS5 = Bridal Suites \n HS1 to HS5 = Honeymoon Suite");
                }
                else if (adultno[index - 1] <= 4)
                {
                    Console.WriteLine();
                    Console.WriteLine("Here are our available rooms:");
                    Console.WriteLine();
                    Console.WriteLine("BS1, BS2, BS3, BS4, BS5 \n Bridal Suites (1000 php per head for 24hrs)");
                    Console.WriteLine("Romantic ambiance with a king-sized bed \n A spacious bathroom with a Jacuzzi tub \n A separate living area \n Champagne \n Chocolates \n Other romantic touches");
                    Console.WriteLine();
                    Console.WriteLine("HS1, HS2, HS3, HS4, HS5 \n Honeymoon Suite (1500 php per head for 24hrs)");
                    Console.WriteLine("Four-poster bed \n A private balcony with a view \n A spacious bathroom with a Jacuzzi tub \n Bottle of champagne \n Rose petals \n Other romantic amenities \n ");
                    Console.WriteLine();
                    Console.WriteLine(" BS1 to BS5 = Bridal Suites \n HS1 to HS5 = Honeymoon Suite");
                }
                else if (adultno[index - 1] <= 5)
                {
                    Console.WriteLine();
                    Console.WriteLine("Here are our available rooms:");
                    Console.WriteLine();
                    Console.WriteLine("HS1, HS2, HS3, HS4, HS5 \n Honeymoon Suite (1500 php per head for 24hrs)");
                    Console.WriteLine("Four-poster bed \n A private balcony with a view \n A spacious bathroom with a Jacuzzi tub \n Bottle of champagne \n Rose petals \n Other romantic amenities \n ");
                    Console.WriteLine();
                    Console.WriteLine(" HS1 to HS5 = Honeymoon Suite");
                    Console.WriteLine();
                }

                Console.Write("Enter the code of the room that you choose: ");
                roomchoice = Console.ReadLine().ToUpper();

                switch (roomchoice)
                {
                    case "SS1":
                        Console.WriteLine("You selected Standard Suite room number 1.");
                        ReserveRoom(0, "Standard Suite room number 1");
                        costperday = SS;
                        validroom = true;
                        break;
                    case "MS1":
                        Console.WriteLine("You selected Mini Suite room number 1.");
                        ReserveRoom(1, "Mini Suite room number 1");
                        costperday = MS;
                        validroom = true;
                        break;
                    case "BS1":
                        Console.WriteLine("You selected Bridal Suites room number 1.");
                        ReserveRoom(2, "Bridal Suite room number 1");
                        costperday = BS;
                        validroom = true;
                        break;
                    case "HS1":
                        Console.WriteLine("You selected Honeymoon Suite room number 1.");
                        ReserveRoom(3, "Honeymoon Suite room number 1");
                        costperday = HS;
                        validroom = true;
                        break;
                    case "SS2":
                        Console.WriteLine("You selected Standard Suite room number 2.");
                        ReserveRoom(4, "Standard Suite room number 2");
                        costperday = SS;
                        validroom = true;
                        break;
                    case "MS2":
                        Console.WriteLine("You selected Mini Suite room number 2.");
                        ReserveRoom(5, "Mini Suite room number 2");
                        costperday = MS;
                        validroom = true;
                        break;
                    case "BS2":
                        Console.WriteLine("You selected Bridal Suites room number 2.");
                        ReserveRoom(6, "Bridal Suite room number 2");
                        costperday = BS;
                        validroom = true;
                        break;
                    case "HS2":
                        Console.WriteLine("You selected Honeymoon Suite room number 2.");
                        ReserveRoom(7, "Honeymoon Suite room number 2");
                        costperday = HS;
                        validroom = true;
                        break;
                    case "SS3":
                        Console.WriteLine("You selected Standard Suite room number 3.");
                        ReserveRoom(8, "Standard Suite room number 3");
                        costperday = SS;
                        validroom = true;
                        break;
                    case "MS3":
                        Console.WriteLine("You selected Mini Suite room number 3.");
                        ReserveRoom(9, "Mini Suite room number 3");
                        costperday = MS;
                        validroom = true;
                        break;
                    case "BS3":
                        Console.WriteLine("You selected Bridal Suites room number 3.");
                        ReserveRoom(10, "Bridal Suite room number 3");
                        costperday = BS;
                        validroom = true;
                        break;
                    case "HS3":
                        Console.WriteLine("You selected Honeymoon Suite room number 3.");
                        ReserveRoom(11, "Honeymoon Suite room number 3");
                        costperday = HS;
                        validroom = true;
                        break;
                    case "SS4":
                        Console.WriteLine("You selected Standard Suite room number 4");
                        ReserveRoom(12, "Standard Suite room number 4");
                        costperday = SS;
                        validroom = true;
                        break;
                    case "MS4":
                        Console.WriteLine("You selected Mini Suite room number 4.");
                        ReserveRoom(13, "Mini Suite room number 4");
                        costperday = MS;
                        validroom = true;
                        break;
                    case "BS4":
                        Console.WriteLine("You selected Bridal Suites room number 4.");
                        ReserveRoom(14, "Bridal Suite room number 4");
                        costperday = BS;
                        validroom = true;
                        break;
                    case "HS4":
                        Console.WriteLine("You selected Honeymoon Suite room number 4.");
                        ReserveRoom(15, "Honeymoon Suite room number 4");
                        costperday = HS;
                        validroom = true;
                        break;
                    case "SS5":
                        Console.WriteLine("You selected Standard Suite room number 5");
                        ReserveRoom(16, "Standard Suite room number 5");
                        costperday = SS;
                        validroom = true;
                        break;
                    case "MS5":
                        Console.WriteLine("You selected Mini Suite room number 5.");
                        ReserveRoom(17, "Mini Suite room number 5");
                        costperday = MS;
                        validroom = true;
                        break;
                    case "BS5":
                        Console.WriteLine("You selected Bridal Suites room number 5.");
                        ReserveRoom(18, "Bridal Suite room number 5");
                        costperday = BS;
                        validroom = true;
                        break;
                    case "HS5":
                        Console.WriteLine("You selected Honeymoon Suite room number 5.");
                        ReserveRoom(19, "Honeymoon Suite room number 5");
                        costperday = HS;
                        validroom = true;
                        break;

                    default:
                        Console.WriteLine("Wrong code, please only enter the available code");
                        break;
                }
                Console.ReadLine();
                break;
            }

        }

        static void ReserveRoom(int roomIndex, string roomchoice)
        {
            if (rooms[roomIndex])
            {
                Console.WriteLine($"The {roomchoice} room is already reserved. Please choose another room.");
                Console.ReadLine();
                RoomType();
            }
            else
            {
                rooms[roomIndex] = true;
                Console.WriteLine($"The {roomchoice} room has been reserved successfully!");
                Console.ReadLine();
            }
        }

        static void DateAndCost()
        {
            Console.Clear();

            Console.WriteLine();
            Console.WriteLine("******************************************");
            Console.WriteLine("*               Date of Stay             *");
            Console.WriteLine("******************************************");

            Console.Write("Check-in date (yyyy-MM-dd): ");
            startDate[index - 1] = GetValidDateInput();

            Console.Write("Check-out date (yyyy-MM-dd): ");
            endDate[index - 1] = GetValidDateInput();

            if (!IsRoomAvailableForTimePeriod(startDate[index - 1], endDate[index - 1], roomchoice))
            {
                Console.WriteLine($"The {roomchoice} room is not available for the selected time period. Please choose a different room or time.");
            }

            daysDifference[index - 1] = (int)(endDate[index - 1] - startDate[index - 1]).TotalDays;
            Console.WriteLine($"You will be staying for {daysDifference[index - 1]} days.");

            total[index - 1] = adultno[index - 1] * (daysDifference[index - 1] * costperday);

            Console.WriteLine($"The total cost for {roomchoice} with {daysDifference[index - 1]} number of days and {adultno[index - 1]} residents is : P" + total[index - 1]);

            Console.ReadKey();

        }


        static DateTime GetValidDateInput()
        {
            DateTime date;
            string input;

            do
            {
                Console.Write("Enter a valid date (yyyy-MM-dd): ");
                input = Console.ReadLine();

                if (!DateTime.TryParseExact(input, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out date))
                {
                    Console.WriteLine("Invalid input. Please enter a valid date in the format yyyy-MM-dd.");
                }

            } while (date == DateTime.MinValue);

            return date;

        }

    static bool IsRoomAvailableForTimePeriod(DateTime startDate, DateTime endDate, string roomchoice)
        {
            for (int i = 0; i < rooms.Length; i++)
            {
                if (rooms[i] && roomchoice.ToLower() == RoomType(i) && !(endDate <= roomEntryTimes[i] || startDate >= roomExitTimes[i]))
                {
                    return false; // Room is already reserved for the selected time period
                }
            }
            return true;
        }

      

        static void Incompletebookingdetails()
        {


            Console.Clear();

            finalroom[index - 1] = roomchoice;

            Console.WriteLine("");
            Console.WriteLine("Booking Details : "); ;
            Console.WriteLine("Name: " + name[index - 1]);
            Console.WriteLine("Check-in Date: " + startDate[index - 1]);
            Console.WriteLine("Check-out Date: " + endDate[index - 1]);
            Console.WriteLine("Days to stay: " + daysDifference[index - 1]);
            Console.WriteLine("Room Choice: " + roomchoice);
            Console.WriteLine("Residents: " + adultno[index - 1]);
            Console.WriteLine("Total Cost: " + total[index - 1]);
            Console.WriteLine("");

        }

        static void confirmation()
        {

            bool validChoice = false;

            Console.WriteLine("\n\n\nDoes your Booking Information are Correct?");
            Console.WriteLine("1. Yes - Proceed to Payment");
            Console.WriteLine("2. No - Book again");

            Console.Write("Select number to proceed: ");

            while (!validChoice)
            {

                if (int.TryParse(Console.ReadLine(), out int homeChoice))
                {
                    switch (homeChoice)
                    {
                        case 1:
                            Payment();
                            validChoice = true;
                            finalbookingdetails();
                            break;
                        case 2:
                            Welcome();
                            validChoice = true;
                            break;
                        default:
                            Console.WriteLine("Invalid choice. Please enter 1 or 2.");
                            break;
                    }
                }
                else
                {
                    Console.Write("Invalid input. Please enter a number: ");
                }
            }


        }

        static string paymentMethod()
        {
            Console.Clear();

            Console.WriteLine("1. Card");
            Console.WriteLine("2. Gcash");
            Console.WriteLine("3. Paypal");

            Console.Write("Select Payment Method: ");

            int choice = int.Parse(Console.ReadLine());
            do
            {
                Console.Write("Enter the number of your payment method choice: ");
            }
            while (choice < 1 || choice > 3);

            switch (choice)
            {
                case 1:
                    return "Card";
                case 2:
                    return "Gcash";
                case 3:
                    return "Paypal";
                default:
                    return string.Empty;
            }
        }

        static void Payment()
        {
            paymentmeth[index - 1] = paymentMethod();

            if (paymentmeth[index - 1] == "Card")
            {
                Cardpayment(total[index - 1]);
            }
            else if (paymentmeth[index - 1] == "Gcash")
            {
                gcashpayment(total[index - 1]);
            }
            else if (paymentmeth[index - 1] == "Paypal")
            {
                Paypalpayment(total[index - 1]);
            }

        }

        static void Cardpayment(double total)
        {
            Console.Clear();
            Console.WriteLine("Payment Details: ");
            Console.Write("Enter your MPIN: ");
            string creditcardnumber = Console.ReadLine();

            Console.WriteLine($"Credit Card successful! Total amount charged: P{total:F2}\n");
            Console.ReadKey();
        }

        static void Paypalpayment(double total)
        {
            Console.Clear();
            Console.WriteLine("Payment Details:");
            Console.Write("Enter your PayPal email address: ");
            string paypalEmail = Console.ReadLine();

            Console.WriteLine($"PayPal Payment successful! Total amount charged: P{total:F2}\n");
            Console.ReadKey();
        }

        static void gcashpayment(double total)
        {
            Console.Clear();
            Console.WriteLine("Payment Details:");
            Console.Write("Enter your name: ");
            string gcashname = Console.ReadLine();
            Console.Write("\nEnter your GCash mobile number: ");
            string gcashNumber = Console.ReadLine();

            Console.WriteLine($"GCash Payment successful! Total amount charged: P{total:F2}\n");
            Console.ReadKey();
        }

        static void finalbookingdetails()
        {
            Console.Clear();

            for (int i = 0; i < index; i++)
            {
                finalname[index - 1] = name[index - 1];
                finalstartDate[index - 1] = startDate[index - 1];
                finalendDate[index - 1] = endDate[index - 1];
                finaldaysDifference[index - 1] = daysDifference[index - 1];
                finalroom[index - 1] = roomchoice;
                finaladultno[index - 1] = adultno[index - 1];
                finaltotal[index - 1] = total[index - 1];
                finalpaymentmeth[index - 1] = paymentmeth[index - 1];


                Console.WriteLine("");
                Console.WriteLine("Booking Details : Complete/Incomplete");
                Console.WriteLine($"Book #{i + 1} : ");
                Console.WriteLine("Name: " + finalname[i]);
                Console.WriteLine("Check-in Date: " + finalstartDate[i]);
                Console.WriteLine("Check-out Date: " + finalendDate[i]);
                Console.WriteLine("Days to stay: " + finaldaysDifference[i]);
                Console.WriteLine("Room Choice: " + finalroom[i]);
                Console.WriteLine("Residents: " + finaladultno[i]);
                Console.WriteLine("Total Cost: " + finaltotal[i]);
                Console.WriteLine("Payment method: " + finalpaymentmeth[i]);
                Console.WriteLine("");

            }


        }

       static void showguidelines()
        {
            Console.Clear();

            Console.WriteLine("\nHere are some guidelines to make your stay enjoyable:");
            Console.WriteLine("\n- The tariff is for the room only and is exclusive of any government taxes applicable Meals and other services are available at extra cost. To know your room tariff, please contact the Duty Manager, guest registration forms must be signed on arrivals.");
            Console.WriteLine("- Bills must be settled on presentation, personal cheques are not accepted..");
            Console.WriteLine("- You can only bring 2 children per room.");
            Console.WriteLine("- In the case of default in the payment of dues by a guest, the management shall have the linen on their luggage and belongings, and be entitled to detain the same and to sell or auction such property at any time without reference to the guest. The net sale proceeds will be appropriate towards the amount due by the guest without prejudice to the management's rights to adopt such further recovery proceedings as my be required.");
            Console.WriteLine("- Please present your ID card, Passport or Temporary Residence Card upon Check-in. By Law visitors must present personal documents for hotel records. These documents will be returned upon departure.");
            Console.WriteLine("- Check out time is ( mention your checkout time here ) please inform the reception if you wish to retain your room beyond this time. The extension will be given depending on the availability. If the room is available, the normal tariff will be charged. On failure of the guest to vacate the room on expiry or period the management shall have the right to remove the guest and his/her belongings from the room occupied by the Guest.");
            Console.WriteLine("- Subject to availability of the storage space, the guest can store luggage in the luggage room, at the guest's sole risk as to loss or damage from any cause, Luggage may not be stored for a period of over 30 days.");

            Console.WriteLine("\nThank you for choosing Morada Grand Royal Hotel, have a nice stay!\n");

            Console.ReadKey();
        }

    }
}
